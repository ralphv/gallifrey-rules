"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[654],{4228:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=s(4848),r=s(8453);const a={sidebar_position:2},i="Sample App Namespace Schema",o={id:"getting-started/sample-app-namespace-schema",title:"Sample App Namespace Schema",description:"Let's start by checking the namespace schema of the sample application.",source:"@site/docs/getting-started/sample-app-namespace-schema.md",sourceDirName:"getting-started",slug:"/getting-started/sample-app-namespace-schema",permalink:"/docs/getting-started/sample-app-namespace-schema",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started/"},next:{title:"Entities/Events/Rules in the Schema",permalink:"/docs/getting-started/entities-events-rules-namespace-schema"}},c={},l=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"sample-app-namespace-schema",children:"Sample App Namespace Schema"})}),"\n",(0,t.jsxs)(n.p,{children:["Let's start by ",(0,t.jsx)(n.a,{href:"https://github.com/ralphv/gallifrey-rules-sample/blob/main/src/index.ts#L9",children:"checking the namespace schema"})," of the sample application."]}),"\n",(0,t.jsx)(n.p,{children:"JSON"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "$namespace": "gallifrey-rules-sample",\n  "$modulesPaths": [\n    "$",\n    "/app/modules"\n  ],\n  "$entities": {\n    "orders": {\n      "new-order": {\n        "$rules": [\n          "notify-customer-new-order-rule"\n        ]\n      }\n    }\n  },\n  "$consumers": [\n    {\n      "name": "new-orders-consumer",\n      "type": "kafka",\n      "eventDispatcher": "new-order-dispatcher",\n      "config": {\n        "groupId": "group-id-1",\n        "topics": "new-orders",\n        "fromBeginning": true\n      }\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"YAML"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"$namespace: gallifrey-rules-sample\n$modulesPaths:\n  - $\n  - /app/modules\n$entities:\n  orders:\n    new-order:\n      $rules:\n        - notify-customer-new-order-rule\n$consumers:\n- name: new-orders-consumer\n  type: kafka\n  eventDispatcher: new-order-dispatcher\n  config:\n    groupId: group-id-1\n    topics: new-orders\n    fromBeginning: true\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's break this down:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$namespace"}),": is your namespace, this uniquely identifies the instance of your engine. Usually you have one namespace per project."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$modulesPaths"}),": is a list of directories that the engine loads all modules from. The ",(0,t.jsx)(n.code,{children:"'$'"})," path is a special path that will get the\nengine to load modules that come with the library itself. In the application example you can see that all of it's modules live under ",(0,t.jsx)(n.a,{href:"https://github.com/ralphv/gallifrey-rules-sample/tree/main/src/modules",children:"modules"})," folder."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$entities"}),": is your list of entities. ",(0,t.jsx)(n.a,{href:"/docs/glossary#entity-or-entity-name",children:"Learn more"}),".\nUnder each entity, is the list of event names. and under each event name is your rules.\nIn this example we have a single entity ",(0,t.jsx)(n.code,{children:"orders"}),". For orders, we have a single event called ",(0,t.jsx)(n.code,{children:"new-order"}),". And\nWhen we get the event ",(0,t.jsx)(n.code,{children:"new-order"})," of entity ",(0,t.jsx)(n.code,{children:"orders"}),", we run the single rule ",(0,t.jsx)(n.code,{children:"notify-customer-new-order-rule"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$consumers"}),": is your list of consumers. Usually you should have at least one. In this example, we\nhave a single consumer named ",(0,t.jsx)(n.code,{children:"new-orders-consumer"}),", of type ",(0,t.jsx)(n.code,{children:"kafka"}),". It's event dispatcher is ",(0,t.jsx)(n.code,{children:"new-order-dispatcher"}),".\nThe ",(0,t.jsx)(n.a,{href:"https://github.com/ralphv/gallifrey-rules-sample/blob/main/src/modules/providers/NewOrdersDispatcher.ts#L16",children:"dispatcher code lives here"}),".\nIf you check the code you can see how the kafka message comes in and how we translate it into a ",(0,t.jsx)(n.a,{href:"https://github.com/ralphv/gallifrey-rules/blob/main/src/GallifreyEventType.ts#L4",children:"Gallifrey Rules event"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Under each consumer you have a config which might be different for different types of consumers. In this example, it's of type ",(0,t.jsx)(n.a,{href:"https://github.com/ralphv/gallifrey-rules/blob/main/src/KafkaConsumer.ts#L309",children:"interface KafkaConsumerConfig"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);