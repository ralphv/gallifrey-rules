import EngineRuleInterface from '../engine-interfaces/EngineRuleInterface';
import { BaseDataObjectRequest, BaseDataObjectResponse } from '../base-interfaces/BaseTypes';
import ConfigurationAccessorInterface from '../interfaces/Providers/ConfigurationAccessorInterface';
import EngineEventContextInterface from '../engine-interfaces/EngineEventContextInterface';
import DoActionDelegate from '../delegates-interfaces/DoActionDelegate';
import PullDataObjectDelegate from '../delegates-interfaces/PullDataObjectDelegate';
import EngineBase from './EngineBase';
import PerformanceTimer from './PerformanceTimer';
import JournalLoggerInterface from '../interfaces/Providers/JournalLoggerInterface';
import GetMetricsPointDelegate from '../delegates-interfaces/GetMetricsPointDelegate';
import EngineScheduledEventContextInterface from '../engine-interfaces/EngineScheduledEventContextInterface';
import { ScheduledEventRequest, ScheduledEventResponse } from '../interfaces/Providers/ScheduledEventsInterface';
import GetScheduledEventContextDelegate from '../delegates-interfaces/GetScheduledEventContextDelegate';
import InsertScheduledEventDelegate from '../delegates-interfaces/InsertScheduledEventDelegate';
import IsScheduledEventDelegate from '../delegates-interfaces/IsScheduledEventDelegate';
export default class EngineRule extends EngineBase implements EngineRuleInterface<any> {
    private readonly doActionDelegate;
    private readonly pullDataObjectDelegate;
    private readonly eventPayload;
    private getScheduledEventContextDelegate;
    private insertScheduledEventDelegate;
    private isScheduledEventDelegate;
    private readonly timer;
    constructor(configurationAccessor: ConfigurationAccessorInterface, engineEventContext: EngineEventContextInterface, doActionDelegate: DoActionDelegate, pullDataObjectDelegate: PullDataObjectDelegate, loggerName: string, eventPayload: any, journalLogger: JournalLoggerInterface, getMetricsPointDelegate: GetMetricsPointDelegate, getScheduledEventContextDelegate: GetScheduledEventContextDelegate, insertScheduledEventDelegate: InsertScheduledEventDelegate, isScheduledEventDelegate: IsScheduledEventDelegate);
    getTimer(): PerformanceTimer;
    doAction<ActionPayloadType>(actionName: string, payload: ActionPayloadType): Promise<any>;
    pullDataObject<DataObjectRequestType extends BaseDataObjectRequest, DataObjectResponseType extends BaseDataObjectResponse>(dataObjectName: string, request: DataObjectRequestType): Promise<DataObjectResponseType>;
    getEventPayload(): any;
    getScheduledEventContext(): EngineScheduledEventContextInterface | undefined;
    insertScheduledEvent(event: ScheduledEventRequest, scheduleAt: Date): Promise<ScheduledEventResponse>;
    isScheduledEvent(): boolean;
}
