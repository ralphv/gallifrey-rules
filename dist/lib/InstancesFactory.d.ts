import SchemaLoader from './SchemaLoader';
import ModulesLoader, { ModuleData } from './ModulesLoader';
import ConfigurationInterface from '../interfaces/Providers/ConfigurationInterface';
import ModuleInterface from '../base-interfaces/ModuleInterface';
import EngineContextInterface from '../engine-interfaces/EngineContextInterface';
import JournalLoggerInterface from '../interfaces/Providers/JournalLoggerInterface';
import LoggerInterface from '../interfaces/Providers/LoggerInterface';
import MetricsInterface from '../interfaces/Providers/MetricsInterface';
import ConfigurationAccessorInterface from '../interfaces/Providers/ConfigurationAccessorInterface';
import GetMetricsPointDelegate from '../delegates-interfaces/GetMetricsPointDelegate';
import ReactToFailureInterface from '../interfaces/Providers/ReactToFailureInterface';
import EventDispatcherInterface from '../interfaces/Providers/EventDispatcherInterface';
import { ActionQueuerInterface, ScheduledEventsInterface } from '../interfaces/Providers';
import DistributedLocksInterface from '../interfaces/Providers/DistributedLocksInterface';
export default class InstancesFactory {
    private schemaLoader;
    private modulesLoader;
    constructor(schemaLoader: SchemaLoader, modulesLoader: ModulesLoader);
    private getProvider;
    private getProviderInstance;
    getConfigurationInterfaceProvider(context: EngineContextInterface): Promise<ConfigurationInterface>;
    getJournalLoggerInterfaceProvider(context: EngineContextInterface, configurationAccessor: ConfigurationAccessorInterface): Promise<JournalLoggerInterface>;
    getLoggerInterfaceProvider(context: EngineContextInterface, configurationAccessor: ConfigurationAccessorInterface): Promise<LoggerInterface>;
    getReactToFailureInterfaceProvider(context: EngineContextInterface, configurationAccessor: ConfigurationAccessorInterface): Promise<ReactToFailureInterface>;
    getMetricsInterfaceProvider(context: EngineContextInterface, configurationAccessor: ConfigurationAccessorInterface): Promise<MetricsInterface>;
    getModulesInstances(engineContext: EngineContextInterface, configurationAccessor: ConfigurationAccessorInterface, modules: ModuleData[], journalLogger: JournalLoggerInterface | undefined, getMetricsPointDelegate: GetMetricsPointDelegate | undefined): Promise<ModuleInterface[]>;
    getEventDispatcherProvider(eventDispatcher: string): EventDispatcherInterface<any, any>;
    getScheduledEventsInterfaceProvider(context: EngineContextInterface, configurationAccessor: ConfigurationAccessorInterface): Promise<ScheduledEventsInterface>;
    getDistributedLocksInterfaceProvider(context: EngineContextInterface, configurationAccessor: ConfigurationAccessorInterface): Promise<DistributedLocksInterface>;
    getActionQueuerInterfaceProvider(context: EngineContextInterface, configurationAccessor: ConfigurationAccessorInterface): Promise<ActionQueuerInterface<any, any>>;
}
